import logging
import time
import random
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import os
from database import Database
import pytz
from datetime import datetime

logger = logging.getLogger(__name__)

class MedicationScheduler:
    def __init__(self, bot_token, db):
        self.bot_token = bot_token
        self.db = db
        # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    
    async def send_reminder(self, user_id, medication_name, dosage, time_str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            bot = Bot(token=self.bot_token)
            
            reminder_text = f"""
üîî **–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!**

üíä **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ:** {medication_name}
üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {dosage}
‚è∞ **–í—Ä–µ–º—è:** {time_str}

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–º–µ—à—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!
            """
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ callback_data
            current_timestamp = int(time.time())
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –Ø –ø—Ä–∏–Ω—è–ª(–∞) –ª–µ–∫–∞—Ä—Å—Ç–≤–æ ‚úÖ", callback_data=f"taken_{medication_name}_{current_timestamp}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await bot.send_message(
                chat_id=user_id,
                text=reminder_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            logger.info(f"Sent reminder to user {user_id} for {medication_name} at {current_timestamp}")
            
        except Exception as e:
            logger.error(f"Error sending reminder to {user_id}: {e}")
    
    async def handle_medication_taken(self, query, medication_name, reminder_sent_time):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏"""
        user = query.from_user
        current_time = int(time.time())
        delay_seconds = current_time - reminder_sent_time
        delay_minutes = delay_seconds // 60
        
        logger.info(f"User {user.id} confirmed {medication_name} with delay: {delay_minutes} minutes")
        
        # –†–∞–∑–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
        if delay_minutes <= 5:
            # –í–æ–≤—Ä–µ–º—è (–¥–æ 5 –º–∏–Ω—É—Ç)
            response = self._get_timely_response(user.first_name, medication_name)
        elif delay_minutes <= 30:
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (5-30 –º–∏–Ω—É—Ç)
            response = self._get_small_delay_response(user.first_name, medication_name, delay_minutes)
        elif delay_minutes <= 60:
            # –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (30-60 –º–∏–Ω—É—Ç)
            response = self._get_medium_delay_response(user.first_name, medication_name, delay_minutes)
        else:
            # –ë–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)
            response = self._get_large_delay_response(user.first_name, medication_name, delay_minutes)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        await query.edit_message_text(
            response,
            parse_mode='Markdown'
        )
    
    def _get_timely_response(self, user_name, medication_name):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–∏–µ–º"""
        timely_praises = [
            f"‚úÖ **–ò–¥–µ–∞–ª—å–Ω–æ –≤–æ–≤—Ä–µ–º—è!** ‚úÖ\n\nüíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ —Ç–æ—á–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üíä\n\n"
            f"–ü–æ—Ç—Ä—è—Å–∞—é—â–µ, {user_name}! üéØ –¢—ã –æ–±—Ä–∞–∑–µ—Ü –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã!",
            
            f"‚úÖ **–°—É–ø–µ—Ä –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ!** ‚úÖ\n\nüíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ –≤–æ–≤—Ä–µ–º—è! üíä\n\n"
            f"–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ, {user_name}! ‚≠ê –¢–∞–∫–æ–π –ø–æ–¥—Ö–æ–¥ –∫ –ª–µ—á–µ–Ω–∏—é –≤–æ—Å—Ö–∏—â–∞–µ—Ç!",
            
            f"‚úÖ **–ë–µ–∑—É–ø—Ä–µ—á–Ω–æ!** ‚úÖ\n\nüíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ —Ç–æ—á–Ω–æ –≤ —Å—Ä–æ–∫! üíä\n\n"
            f"–ë—Ä–∞–≤–æ, {user_name}! üëè –¢–≤–æ—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç!",
            
            f"‚úÖ **–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–æ–≤—Ä–µ–º—è!** ‚úÖ\n\nüíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! üíä\n\n"
            f"–ú–æ–ª–æ–¥–µ—Ü, {user_name}! üí™ –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å - –∫–ª—é—á –∫ —É—Å–ø–µ—à–Ω–æ–º—É –ª–µ—á–µ–Ω–∏—é!"
        ]
        return random.choice(timely_praises)
    
    def _get_small_delay_response(self, user_name, medication_name, delay_minutes):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É (5-30 –º–∏–Ω—É—Ç)"""
        small_delay_responses = [
            f"‚úÖ **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!** ‚úÖ\n\nüíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π ({delay_minutes} –º–∏–Ω) üíä\n\n"
            f"–•–æ—Ä–æ—à–æ, {user_name}! üòä –ù–æ —Å—Ç–∞—Ä–∞–π—Å—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–æ–≤—Ä–µ–º—è - —ç—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ª–µ—á–µ–Ω–∏—è!",
            
            f"‚úÖ **–ü—Ä–∏–Ω—è—Ç–æ!** ‚úÖ\n\nüíä **{medication_name}** - –∑–∞–¥–µ—Ä–∂–∫–∞ {delay_minutes} –º–∏–Ω—É—Ç üíä\n\n"
            f"–ù–µ–ø–ª–æ—Ö–æ, {user_name}! üìù –ó–∞–≤—Ç—Ä–∞ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è —É–ª–æ–∂–∏—Ç—å—Å—è –≤ —Å—Ä–æ–∫ - —Ç–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —ç—Ç–æ–≥–æ —Å—Ç–æ–∏—Ç!",
            
            f"‚úÖ **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!** ‚úÖ\n\nüíä **{medication_name}** - –Ω–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ {delay_minutes} –º–∏–Ω üíä\n\n"
            f"–°–ø—Ä–∞–≤–∏–ª—Å—è, {user_name}! üåü –ü–æ–º–Ω–∏: —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–∏–µ–º –≤ –æ–¥–Ω–æ –≤—Ä–µ–º—è —É—Å–∏–ª–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤!"
        ]
        return random.choice(small_delay_responses)
    
    def _get_medium_delay_response(self, user_name, medication_name, delay_minutes):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å—Ä–µ–¥–Ω—é—é –∑–∞–¥–µ—Ä–∂–∫—É (30-60 –º–∏–Ω—É—Ç)"""
        medium_delay_responses = [
            f"‚ö†Ô∏è **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ —Å –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º** ‚ö†Ô∏è\n\nüíä **{medication_name}** - –∑–∞–¥–µ—Ä–∂–∫–∞ {delay_minutes} –º–∏–Ω—É—Ç üíä\n\n"
            f"{user_name}, —Ç–∞–∫–æ–µ –æ–ø–æ–∑–¥–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–Ω–∏–∑–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è! ‚è∞ –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ –ø—Ä–∏–Ω—è—Ç—å –≤–æ–≤—Ä–µ–º—è!",
            
            f"‚ö†Ô∏è **–ü—Ä–∏–Ω—è—Ç–æ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π** ‚ö†Ô∏è\n\nüíä **{medication_name}** - –æ–ø–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ {delay_minutes} –º–∏–Ω üíä\n\n"
            f"{user_name}, –ø–æ–º–Ω–∏ —á—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–∞! üî¨ –ó–∞–≤—Ç—Ä–∞ –ø–æ—Å—Ç–∞–≤—å –±—É–¥–∏–ª—å–Ω–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!",
            
            f"‚ö†Ô∏è **–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞** ‚ö†Ô∏è\n\nüíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ —á–µ—Ä–µ–∑ {delay_minutes} –º–∏–Ω—É—Ç üíä\n\n"
            f"{user_name}, —Ç–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è! üíä –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –≤—Ä–µ–º—è –ø—Ä–∏–µ–º–∞ - —ç—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–µ—á–µ–Ω–∏—è!"
        ]
        return random.choice(medium_delay_responses)
    
    def _get_large_delay_response(self, user_name, medication_name, delay_minutes):
        """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É (–±–æ–ª–µ–µ 1 —á–∞—Å–∞)"""
        delay_hours = delay_minutes // 60
        delay_remaining_minutes = delay_minutes % 60
        
        time_text = f"{delay_hours} —á {delay_remaining_minutes} –º–∏–Ω" if delay_hours > 0 else f"{delay_minutes} –º–∏–Ω"
        
        large_delay_responses = [
            f"üö® **–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞!** üö®\n\nüíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ —á–µ—Ä–µ–∑ {time_text} üíä\n\n"
            f"{user_name}, —Ç–∞–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —Å–µ—Ä—å–µ–∑–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è! üè• –û–±—Å—É–¥–∏ —Å –≤—Ä–∞—á–æ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫!",
            
            f"üö® **–û–ø–∞—Å–Ω–æ –æ–ø–æ–∑–¥–∞–ª!** üö®\n\nüíä **{medication_name}** - –∑–∞–¥–µ—Ä–∂–∫–∞ {time_text} üíä\n\n"
            f"{user_name}, –ø—Ä–æ–ø—É—Å–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–µ–Ω! üìû –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º - –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Å—è —Å –≤—Ä–∞—á–æ–º!",
            
            f"üö® **–°–µ—Ä—å–µ–∑–Ω–æ–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞!** üö®\n\nüíä **{medication_name}** - –æ–ø–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ {time_text} üíä\n\n"
            f"{user_name}, –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–∏–µ–º! üí° –†–∞—Å—Å–º–æ—Ç—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π!"
        ]
        return random.choice(large_delay_responses)
    
    def schedule_medication_reminders(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤"""
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
        self.scheduler.remove_all_jobs()
        
        medications = self.db.get_all_medications()
        
        for user_id, name, dosage, schedule in medications:
            # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "08:00, 20:00" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
            times = [t.strip() for t in schedule.split(',')]
            
            for time_str in times:
                if ':' in time_str:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ä–µ–º—è
                    try:
                        hour, minute = map(int, time_str.split(':'))
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
                        trigger = CronTrigger(hour=hour, minute=minute, timezone='Europe/Moscow')
                        self.scheduler.add_job(
                            self.send_reminder,
                            trigger,
                            args=[user_id, name, dosage, time_str],
                            id=f"med_{user_id}_{name}_{time_str}",
                            replace_existing=True
                        )
                        
                        logger.info(f"Scheduled reminder for {name} at {time_str} (MSK)")
                    except ValueError as e:
                        logger.error(f"Error parsing time {time_str}: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.schedule_medication_reminders()
        self.scheduler.start()
        logger.info("Medication scheduler started with Moscow timezone")