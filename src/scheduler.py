import logging
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
import os
from database import Database
import pytz

logger = logging.getLogger(__name__)

class MedicationScheduler:
    def __init__(self, bot_token):
        self.bot_token = bot_token
        # –£–∫–∞–∑—ã–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        self.scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
        self.db = Database()
    
    async def send_reminder(self, user_id, medication_name, dosage, time_str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∏–µ–º–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            bot = Bot(token=self.bot_token)
            
            reminder_text = f"""
üîî **–í—Ä–µ–º—è –ø—Ä–∏–Ω—è—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!**

üíä **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ:** {medication_name}
üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {dosage}
‚è∞ **–í—Ä–µ–º—è:** {time_str}

–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∫–æ–≥–¥–∞ –ø—Ä–∏–º–µ—à—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚úÖ –Ø –ø—Ä–∏–Ω—è–ª(–∞) –ª–µ–∫–∞—Ä—Å—Ç–≤–æ ‚úÖ", callback_data=f"taken_{medication_name}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await bot.send_message(
                chat_id=user_id,
                text=reminder_text,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
            logger.info(f"Sent reminder to user {user_id} for {medication_name}")
            
        except Exception as e:
            logger.error(f"Error sending reminder to {user_id}: {e}")
    
    async def handle_medication_taken(self, query, medication_name):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
        user = query.from_user
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Ö–≤–∞–ª—ã
        praises = [
            f"–ú–æ–ª–æ–¥–µ—Ü, {user.first_name}! üéâ –¢—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–≤–æ–µ–º –∑–¥–æ—Ä–æ–≤—å–µ!",
            f"–û—Ç–ª–∏—á–Ω–æ, {user.first_name}! üí™ –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!",
            f"–°—É–ø–µ—Ä, {user.first_name}! üåü –¢—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –ª–µ—á–µ–Ω–∏—é!",
            f"–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, {user.first_name}! üòä –†–µ–≥—É–ª—è—Ä–Ω—ã–π –ø—Ä–∏–µ–º - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞!",
            f"–í–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ, {user.first_name}! ‚≠ê –¢—ã —Å–ª–µ–¥–∏—à—å –∑–∞ —Å–≤–æ–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º!",
            f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, {user.first_name}! üíä –ï—â–µ –æ–¥–∏–Ω —à–∞–≥ –∫ –≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—é!",
            f"–ë—Ä–∞–≤–æ, {user.first_name}! üëè –¢—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∏—Ä–æ–≤–∞–Ω(–∞) –≤ –ª–µ—á–µ–Ω–∏–∏!",
            f"–ü–æ—Ç—Ä—è—Å–∞—é—â–µ, {user.first_name}! üåà –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
        ]
        
        import random
        praise = random.choice(praises)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        await query.edit_message_text(
            f"‚úÖ **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!** ‚úÖ\n\n"
            f"üíä **{medication_name}** - –ø—Ä–∏–Ω—è—Ç–æ –≤–æ–≤—Ä–µ–º—è! üíä\n\n"
            f"{praise}",
            parse_mode='Markdown'
        )
        
        logger.info(f"User {user.id} confirmed taking {medication_name}")
    
    def schedule_medication_reminders(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤"""
        medications = self.db.get_all_medications()
        
        for user_id, name, dosage, schedule in medications:
            # –ü–∞—Ä—Å–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ "08:00, 20:00" –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
            times = [t.strip() for t in schedule.split(',')]
            
            for time_str in times:
                if ':' in time_str:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤—Ä–µ–º—è
                    try:
                        hour, minute = map(int, time_str.split(':'))
                        
                        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
                        trigger = CronTrigger(hour=hour, minute=minute, timezone='Europe/Moscow')
                        self.scheduler.add_job(
                            self.send_reminder,
                            trigger,
                            args=[user_id, name, dosage, time_str],
                            id=f"med_{user_id}_{name}_{time_str}",
                            replace_existing=True
                        )
                        
                        logger.info(f"Scheduled reminder for {name} at {time_str} (MSK)")
                    except ValueError as e:
                        logger.error(f"Error parsing time {time_str}: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.schedule_medication_reminders()
        self.scheduler.start()
        logger.info("Medication scheduler started with Moscow timezone")