import re
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

class MedicationValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞—Ö"""
    
    @staticmethod
    def validate_name(name):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (is_valid, error_message)
        """
        if not name or not name.strip():
            return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        
        name = name.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(name) > 50:
            return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        if len(name) < 2:
            return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s\-\.\,\(\)]+$', name):
            return False, "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        
        return True, name

    @staticmethod
    def validate_dosage(dosage):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–æ–∑–∏—Ä–æ–≤–∫—É
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (is_valid, error_message)
        """
        if not dosage or not dosage.strip():
            return False, "‚ùå –î–æ–∑–∏—Ä–æ–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        
        dosage = dosage.strip()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        if len(dosage) > 30:
            return False, "‚ùå –î–æ–∑–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤)"
        
        if len(dosage) < 1:
            return False, "‚ùå –î–æ–∑–∏—Ä–æ–≤–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s\-\.\,\(\)\/–º–≥–º–ª—Ç–∞–±–∫–∞–ø—Å—É–ª]+$', dosage, re.IGNORECASE):
            return False, "‚ùå –î–æ–∑–∏—Ä–æ–≤–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã"
        
        return True, dosage

    @staticmethod
    def validate_schedule(schedule_str):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (is_valid, error_message, times_list)
        """
        if not schedule_str or not schedule_str.strip():
            return False, "‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º", None
        
        schedule_str = schedule_str.strip()
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π
        time_strings = [t.strip() for t in schedule_str.split(',')]
        valid_times = []
        
        for time_str in time_strings:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú
            if not re.match(r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$', time_str):
                return False, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00)", None
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                hour, minute = map(int, time_str.split(':'))
                if hour > 23 or minute > 59:
                    return False, f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: '{time_str}'", None
                
                valid_times.append(time_str)
            except ValueError:
                return False, f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤—Ä–µ–º–µ–Ω–∏: '{time_str}'", None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤—Ä–µ–º—è
        if not valid_times:
            return False, "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞", None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ä–µ–º–µ–Ω
        if len(valid_times) > 6:
            return False, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞ (–º–∞–∫—Å–∏–º—É–º 6 —Ä–∞–∑ –≤ –¥–µ–Ω—å)", None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if len(valid_times) != len(set(valid_times)):
            return False, "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–µ–º–∞", None
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–∞
        valid_times.sort()
        
        return True, ", ".join(valid_times), valid_times

    @staticmethod
    def validate_complete_medication(name, dosage, schedule):
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (is_valid, error_message, validated_data)
        """
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        is_valid_name, name_msg = MedicationValidator.validate_name(name)
        if not is_valid_name:
            return False, name_msg, None
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–æ–∑–∏—Ä–æ–≤–∫—É
        is_valid_dosage, dosage_msg = MedicationValidator.validate_dosage(dosage)
        if not is_valid_dosage:
            return False, dosage_msg, None
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        is_valid_schedule, schedule_msg, times_list = MedicationValidator.validate_schedule(schedule)
        if not is_valid_schedule:
            return False, schedule_msg, None
        
        validated_data = {
            'name': name_msg,  # —É–∂–µ –æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            'dosage': dosage_msg,  # —É–∂–µ –æ—á–∏—â–µ–Ω–Ω–∞—è –¥–æ–∑–∏—Ä–æ–≤–∫–∞
            'schedule': schedule_msg,  # —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
            'times_list': times_list  # —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        }
        
        return True, "‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã", validated_data

class UserInputValidator:
    """–í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    
    @staticmethod
    def sanitize_input(text, max_length=100):
        """
        –û—á–∏—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–≤–æ–¥ –æ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        """
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = text.strip()
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        if len(text) > max_length:
            text = text[:max_length]
        
        # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        text = text.replace('<', '&lt;').replace('>', '&gt;')
        text = text.replace('"', '&quot;').replace("'", '&#39;')
        
        return text

    @staticmethod
    def validate_time_input(time_input):
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ–¥—Å–∫–∞–∑–∫–∞–º–∏
        """
        # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        examples = [
            "08:00",
            "08:00, 20:00", 
            "09:30, 14:00, 21:15",
            "07:00, 12:00, 18:00, 22:00"
        ]
        
        is_valid, message, times_list = MedicationValidator.validate_schedule(time_input)
        
        if not is_valid:
            error_message = f"{message}\n\nüí° **–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:**\n"
            for example in examples:
                error_message += f"‚Ä¢ `{example}`\n"
            error_message += "\n–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
            
            return False, error_message, None
        
        return True, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", times_list