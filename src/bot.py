import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv
from database import Database
from scheduler import MedicationScheduler
from validators import MedicationValidator, UserInputValidator  

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
db = Database()
scheduler = MedicationScheduler(BOT_TOKEN, db)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üíä –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data="add_medication")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞", callback_data="my_medications")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ", callback_data="delete_medication")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def edit_or_reply_message(message, text, reply_markup=None, parse_mode='Markdown'):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        return message
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.debug(f"Cannot edit message, sending new one: {e}")
        return await message.reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    try:
        photo_file = open('assets/Hello.jpg', 'rb')
        await update.message.reply_photo(
            photo=photo_file,
            caption=f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**\n\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤!",
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"Error sending welcome photo: {e}")
        await update.message.reply_text(
            f"**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!**\n\n–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤!"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    text = "üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "main_menu":
        await show_main_menu(query)
    elif data == "add_medication":
        await start_add_medication(query)
    elif data == "my_medications":
        await my_medications(query)
    elif data == "delete_medication":
        await delete_medication_start(query)
    elif data == "help":
        await help_button(query)
    elif data.startswith("delete_"):
        medication_id = data.split("_")[1]
        await delete_medication_confirm(query, medication_id)
    elif data.startswith("taken_"):
        parts = data.split("_")
        medication_name = parts[1]
        reminder_sent_time = int(parts[2])
        await scheduler.handle_medication_taken(query, medication_name, reminder_sent_time)

async def show_main_menu(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –æ—á–∏—Å—Ç–∫–æ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    text = "üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    await edit_or_reply_message(query.message, text, get_main_menu_keyboard())

async def start_add_medication(query):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    user_id = query.from_user.id
    user_sessions[user_id] = {'step': 'name'}
    
    keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üíä **–î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–ï–ö–ê–†–°–¢–í–ê** üíä\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:\n\n"
        "üîí *–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:* 2-50 —Å–∏–º–≤–æ–ª–æ–≤"
    )
    await edit_or_reply_message(query.message, text, reply_markup)

async def handle_medication_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    user_id = update.message.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id]['step'] != 'name':
        await update.message.reply_text("üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
        return
    
    medication_name = UserInputValidator.sanitize_input(update.message.text)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    is_valid, error_message = MedicationValidator.validate_name(medication_name)
    
    if not is_valid:
        keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=reply_markup
        )
        return
    
    user_sessions[user_id]['name'] = medication_name
    user_sessions[user_id]['step'] = 'dosage'
    
    keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        f"‚úÖ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {medication_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '500 –º–≥', '1 —Ç–∞–±–ª–µ—Ç–∫–∞'):\n\n"
        "üí° *–ú–∞–∫—Å–∏–º—É–º 30 —Å–∏–º–≤–æ–ª–æ–≤*"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_medication_dosage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    user_id = update.message.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id]['step'] != 'dosage':
        await update.message.reply_text("üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
        return
    
    dosage = UserInputValidator.sanitize_input(update.message.text)
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–æ–∑–∏—Ä–æ–≤–∫—É
    is_valid, error_message = MedicationValidator.validate_dosage(dosage)
    
    if not is_valid:
        keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"{error_message}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥–æ–∑–∏—Ä–æ–≤–∫—É –µ—â–µ —Ä–∞–∑:",
            reply_markup=reply_markup
        )
        return
    
    user_sessions[user_id]['dosage'] = dosage
    user_sessions[user_id]['step'] = 'schedule'
    
    keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    schedule_examples = "üí° **–ü—Ä–∏–º–µ—Ä—ã:**\n‚Ä¢ 08:00\n‚Ä¢ 08:00, 20:00\n‚Ä¢ 09:30, 14:00, 21:15"
    
    text = (
        f"üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {dosage}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '08:00, 20:00' –¥–ª—è –ø—Ä–∏–µ–º–∞ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º\n\n"
        f"{schedule_examples}"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_medication_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"""
    user_id = update.message.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id]['step'] != 'schedule':
        await update.message.reply_text("üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
        return
    
    schedule_input = UserInputValidator.sanitize_input(update.message.text)
    name = user_sessions[user_id]['name']
    dosage = user_sessions[user_id]['dosage']
    
    # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    is_valid, error_message, times_list = MedicationValidator.validate_schedule(schedule_input)
    
    if not is_valid:
        keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            error_message,
            reply_markup=reply_markup
        )
        return
    
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    is_valid_complete, final_message, validated_data = MedicationValidator.validate_complete_medication(
        name, dosage, schedule_input
    )
    
    if not is_valid_complete:
        keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            final_message,
            reply_markup=reply_markup
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±–∞–∑—É
    medication_id = db.add_medication(
        user_id=user_id,
        name=validated_data['name'],
        dosage=validated_data['dosage'],
        schedule=validated_data['schedule']
    )
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    scheduler.schedule_medication_reminders()
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions:
        del user_sessions[user_id]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    schedule_display = validated_data['schedule']
    
    success_text = (
        f"‚úÖ **–õ–ï–ö–ê–†–°–¢–í–û –î–û–ë–ê–í–õ–ï–ù–û** ‚úÖ\n\n"
        f"üíä **–ù–∞–∑–≤–∞–Ω–∏–µ:** {validated_data['name']}\n"
        f"üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {validated_data['dosage']}\n"
        f"‚è∞ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** {schedule_display}\n\n"
        f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
    )
    
    await update.message.reply_text(success_text)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await send_help_message(update.message)

async def help_button(query):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    await send_help_message(query.message)

async def send_help_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"""
    help_text = """
üíä **–ö–ê–ö –ü–û–õ–¨–ó–û–í–ê–¢–¨–°–Ø –ë–û–¢–û–ú** üíä

üìã **–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ** - –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–æ–∑–∏—Ä–æ–≤–∫—É –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
üìã **–ú–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞** - –ø–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞  
üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ** - –≤—ã–±–µ—Ä–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –ø—Ä–∏–µ–º–µ
‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞** - –Ω–∞–∂–∏–º–∞–π "–Ø –ø—Ä–∏–Ω—è–ª(–∞)" –∫–æ–≥–¥–∞ –≤—ã–ø—å–µ—à—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ

‚è∞ **–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** "08:00, 20:00" –¥–ª—è –ø—Ä–∏–µ–º–∞ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º

üîí **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: 2-50 —Å–∏–º–≤–æ–ª–æ–≤
‚Ä¢ –î–æ–∑–∏—Ä–æ–≤–∫–∞: 1-30 —Å–∏–º–≤–æ–ª–æ–≤  
‚Ä¢ –í—Ä–µ–º—è: —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú, –º–∞–∫—Å–∏–º—É–º 6 —Ä–∞–∑ –≤ –¥–µ–Ω—å

üí° **–ü—Ä–∏–º–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏:**
‚Ä¢ 08:00
‚Ä¢ 08:00, 20:00
‚Ä¢ 09:30, 14:00, 21:15
    """
    
    keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await edit_or_reply_message(message, help_text, reply_markup)

async def my_medications(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    medications = db.get_user_medications(user_id)
    
    if not medications:
        keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await edit_or_reply_message(
            query.message,
            "üì≠ **–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.**",
            reply_markup
        )
        return
    
    medications_text = "üíä **–í–ê–®–ò –õ–ï–ö–ê–†–°–¢–í–ê** üíä\n\n"
    for med_id, name, dosage, schedule in medications:
        medications_text += f"üíä **{name}**\n"
        medications_text += f"  üìã –î–æ–∑–∏—Ä–æ–≤–∫–∞: {dosage}\n"
        medications_text += f"  ‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await edit_or_reply_message(query.message, medications_text, reply_markup)

async def delete_medication_start(query):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    user_id = query.from_user.id
    medications = db.get_user_medications(user_id)
    
    if not medications:
        keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await edit_or_reply_message(
            query.message,
            "üì≠ **–£ –≤–∞—Å –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.**",
            reply_markup
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    keyboard = []
    for med_id, name, dosage, schedule in medications:
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {name} ({dosage})", callback_data=f"delete_{med_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await edit_or_reply_message(
        query.message,
        "üóëÔ∏è **–í–´–ë–ï–†–ò–¢–ï –õ–ï–ö–ê–†–°–¢–í–û –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø** üóëÔ∏è",
        reply_markup
    )

async def delete_medication_confirm(query, medication_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"""
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    medication = db.get_medication(medication_id, user_id)
    
    if not medication:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await edit_or_reply_message(
            query.message,
            "‚ùå **–õ–ï–ö–ê–†–°–¢–í–û –ù–ï –ù–ê–ô–î–ï–ù–û** ‚ùå",
            reply_markup
        )
        return
    
    med_id, name, dosage, schedule = medication
    
    # –£–¥–∞–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
    success = db.delete_medication(medication_id, user_id)
    
    if success:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.schedule_medication_reminders()
        
        success_text = (
            f"‚úÖ **–õ–ï–ö–ê–†–°–¢–í–û –£–î–ê–õ–ï–ù–û** ‚úÖ\n\n"
            f"üíä **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
            f"üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {dosage}\n"
            f"‚è∞ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** {schedule}"
        )
        
        await edit_or_reply_message(query.message, success_text)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        await query.message.reply_text("üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
    else:
        keyboard = [[InlineKeyboardButton("üîô", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await edit_or_reply_message(
            query.message,
            "‚ùå **–õ–ï–ö–ê–†–°–¢–í–û –ù–ï –ù–ê–ô–î–ï–ù–û** ‚ùå",
            reply_markup
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    if user_id in user_sessions:
        step = user_sessions[user_id]['step']
        
        if step == 'name':
            await handle_medication_name(update, context)
        elif step == 'dosage':
            await handle_medication_dosage(update, context)
        elif step == 'schedule':
            await handle_medication_schedule(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text("üíä **–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()