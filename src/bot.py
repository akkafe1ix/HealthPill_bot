import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv
from database import Database
from scheduler import MedicationScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
db = Database()
scheduler = MedicationScheduler(BOT_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_sessions = {}

def get_main_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [InlineKeyboardButton("üíä –î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ üíä", callback_data="add_medication")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ üìã", callback_data="my_medications")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ üóëÔ∏è", callback_data="delete_medication")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚ÑπÔ∏è", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    db.add_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    text = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –≤–æ–≤—Ä–µ–º—è.\n\nüíä **–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:** üíä"
    
    await update.message.reply_text(text, reply_markup=get_main_menu_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    data = query.data
    
    if data == "main_menu":
        await query.message.reply_text("üíä **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
    elif data == "add_medication":
        await start_add_medication(query)
    elif data == "my_medications":
        await my_medications(query)
    elif data == "delete_medication":
        await delete_medication_start(query)
    elif data == "help":
        await help_button(query)
    elif data.startswith("delete_"):
        medication_id = data.split("_")[1]
        await delete_medication_confirm(query, medication_id)
    elif data.startswith("taken_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è–ª –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"
        medication_name = data.split("_", 1)[1]  # –ë–µ—Ä–µ–º –≤—Å–µ –ø–æ—Å–ª–µ "taken_"
        await scheduler.handle_medication_taken(query, medication_name)

async def start_add_medication(query):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    user_id = query.from_user.id
    user_sessions[user_id] = {'step': 'name'}
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üíä **–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ!** üíä\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:",
        reply_markup=reply_markup
    )

async def handle_medication_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    user_id = update.message.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id]['step'] != 'name':
        await update.message.reply_text("üíä **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
        return
    
    medication_name = update.message.text
    user_sessions[user_id]['name'] = medication_name
    user_sessions[user_id]['step'] = 'dosage'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üìù **–ù–∞–∑–≤–∞–Ω–∏–µ:** {medication_name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: '500 –º–≥', '1 —Ç–∞–±–ª–µ—Ç–∫–∞'):",
        reply_markup=reply_markup
    )

async def handle_medication_dosage(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–æ–∑–∏—Ä–æ–≤–∫–∏"""
    user_id = update.message.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id]['step'] != 'dosage':
        await update.message.reply_text("üíä **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
        return
    
    dosage = update.message.text
    user_sessions[user_id]['dosage'] = dosage
    user_sessions[user_id]['step'] = 'schedule'
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞ ‚ùå", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {dosage}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '08:00, 20:00' –¥–ª—è –ø—Ä–∏–µ–º–∞ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º",
        reply_markup=reply_markup
    )

async def handle_medication_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"""
    user_id = update.message.from_user.id
    
    if user_id not in user_sessions or user_sessions[user_id]['step'] != 'schedule':
        await update.message.reply_text("üíä **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
        return
    
    schedule = update.message.text
    name = user_sessions[user_id]['name']
    dosage = user_sessions[user_id]['dosage']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –≤ –±–∞–∑—É
    medication_id = db.add_medication(
        user_id=user_id,
        name=name,
        dosage=dosage,
        schedule=schedule
    )
    
    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    scheduler.schedule_medication_reminders()
    
    # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_sessions:
        del user_sessions[user_id]
    
    await update.message.reply_text(
        f"‚úÖ **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!** ‚úÖ\n\n"
        f"üíä **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
        f"üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {dosage}\n"
        f"‚è∞ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** {schedule}\n\n"
        f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await update.message.reply_text("üíä **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

async def help_button(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–º–æ—â—å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    help_text = """
üíä **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:** üíä

üìã **–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ** - –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–æ–∑–∏—Ä–æ–≤–∫—É –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

üìã **–ú–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞** - –ø–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞

üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ** - –≤—ã–±–µ—Ä–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –ø—Ä–∏–µ–º–µ

‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞** - –Ω–∞–∂–∏–º–∞–π "–Ø –ø—Ä–∏–Ω—è–ª(–∞)" –∫–æ–≥–¥–∞ –≤—ã–ø—å–µ—à—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ

‚è∞ **–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** "08:00, 20:00" –¥–ª—è –ø—Ä–∏–µ–º–∞ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(help_text, reply_markup=reply_markup)

async def my_medications(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = query.from_user.id
    medications = db.get_user_medications(user_id)
    
    if not medications:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–µ–∫–∞—Ä—Å—Ç–≤.",
            reply_markup=reply_markup
        )
        return
    
    medications_text = "üíä **–í–∞—à–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:** üíä\n\n"
    for med_id, name, dosage, schedule in medications:
        medications_text += f"‚Ä¢ **{name}**\n"
        medications_text += f"  –î–æ–∑–∏—Ä–æ–≤–∫–∞: {dosage}\n"
        medications_text += f"  –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {schedule}\n\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(medications_text, reply_markup=reply_markup)

async def delete_medication_start(query):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞"""
    user_id = query.from_user.id
    medications = db.get_user_medications(user_id)
    
    if not medications:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            reply_markup=reply_markup
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    keyboard = []
    for med_id, name, dosage, schedule in medications:
        keyboard.append([InlineKeyboardButton(f"üóëÔ∏è {name} ({dosage})", callback_data=f"delete_{med_id}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.message.reply_text(
        "üóëÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:** üóëÔ∏è",
        reply_markup=reply_markup
    )

async def delete_medication_confirm(query, medication_id):
    """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ"""
    user_id = query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–µ–∫–∞—Ä—Å—Ç–≤–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    medication = db.get_medication(medication_id, user_id)
    
    if not medication:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "‚ùå –õ–µ–∫–∞—Ä—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ‚ùå",
            reply_markup=reply_markup
        )
        return
    
    med_id, name, dosage, schedule = medication
    
    # –£–¥–∞–ª—è–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–æ
    success = db.delete_medication(medication_id, user_id)
    
    if success:
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.schedule_medication_reminders()
        
        await query.message.reply_text(
            f"‚úÖ **–õ–µ–∫–∞—Ä—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–æ!** ‚úÖ\n\n"
            f"üíä **–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
            f"üìã **–î–æ–∑–∏—Ä–æ–≤–∫–∞:** {dosage}\n"
            f"‚è∞ **–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:** {schedule}"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.reply_text("üíä **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())
    else:
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ. ‚ùå",
            reply_markup=reply_markup
        )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üíä **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:** üíä

üìã **–î–æ–±–∞–≤–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ** - –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–æ–∑–∏—Ä–æ–≤–∫—É –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

üìã **–ú–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞** - –ø–æ—Å–º–æ—Ç—Ä–∏ –≤—Å–µ —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞

üóëÔ∏è **–£–¥–∞–ª–∏—Ç—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ** - –≤—ã–±–µ—Ä–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è

‚è∞ **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è** - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç –æ –ø—Ä–∏–µ–º–µ

‚úÖ **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–µ–º–∞** - –Ω–∞–∂–∏–º–∞–π "–Ø –ø—Ä–∏–Ω—è–ª(–∞)" –∫–æ–≥–¥–∞ –≤—ã–ø—å–µ—à—å –ª–µ–∫–∞—Ä—Å—Ç–≤–æ

‚è∞ **–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏:** "08:00, 20:00" –¥–ª—è –ø—Ä–∏–µ–º–∞ —É—Ç—Ä–æ–º –∏ –≤–µ—á–µ—Ä–æ–º
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(help_text, reply_markup=reply_markup)

async def debug_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ë–î"""
    user_id = update.message.from_user.id
    
    conn = db.get_connection()
    cursor = conn.cursor()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT * FROM users")
    users = cursor.fetchall()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    cursor.execute("SELECT * FROM medications WHERE user_id = ?", (user_id,))
    medications = cursor.fetchall()
    
    debug_text = f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:** {users}\n\n"
    debug_text += f"üíä **–¢–≤–æ–∏ –ª–µ–∫–∞—Ä—Å—Ç–≤–∞:** {medications}"
    
    await update.message.reply_text(debug_text)
    conn.close()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    user_id = update.message.from_user.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–µ–∫–∞—Ä—Å—Ç–≤–∞
    if user_id in user_sessions:
        step = user_sessions[user_id]['step']
        
        if step == 'name':
            await handle_medication_name(update, context)
        elif step == 'dosage':
            await handle_medication_dosage(update, context)
        elif step == 'schedule':
            await handle_medication_schedule(update, context)
    else:
        # –ï—Å–ª–∏ –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text("üíä **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é** üíä\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_keyboard())

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_handler))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("debug", debug_db))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()

if __name__ == '__main__':
    main()